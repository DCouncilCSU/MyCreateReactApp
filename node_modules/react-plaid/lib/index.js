"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CONNECT_PRODUCT = exports.AUTH_PRODUCT = exports.PROD_ENV = exports.DEV_ENV = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = require("prop-types");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DEV_ENV = "tartan";
var PROD_ENV = "production";
var AUTH_PRODUCT = "auth";
var CONNECT_PRODUCT = "connect";
// We use this to handle open/loaded to prevent unnecessary re-rendering

var ReactPlaid = function (_Component) {
  _inherits(ReactPlaid, _Component);

  function ReactPlaid() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ReactPlaid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactPlaid.__proto__ || Object.getPrototypeOf(ReactPlaid)).call.apply(_ref, [this].concat(args))), _this), _this.loaded = false, _this.open = false, _this.handleOpen = function () {
      _this.open = true;
      if (_this.loaded) {
        _this.linkHandler.open(_this.props.institution);
        _this.props.onOpen();
      }
    }, _this.handleLoad = function () {
      _this.loaded = true;
      _this.props.onLoad();
      if (_this.open) _this.handleOpen();
    }, _this.handleSuccess = function (publicToken, metaData) {
      _this.props.onSuccess(publicToken, metaData);
    }, _this.handleExit = function () {
      _this.open = false;
      _this.props.onExit();
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ReactPlaid, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.linkHandler = Plaid.create({
        clientName: this.props.clientName,
        product: this.props.product,
        key: this.props.key,
        env: this.props.env,
        webhook: this.props.webhook,
        token: this.props.token,
        selectAccount: this.props.selectAccount,
        longtail: this.props.longtail,
        onLoad: this.handleLoad,
        onSuccess: this.handleSuccess,
        onExit: this.handleExit
      });

      this.props.onLoading();
      if (this.props.open) this.handleOpen();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.props.open && !prevProps.open) {
        this.handleOpen();
      } else if (prevProps.open && !this.props.open) {
        // Close?
        // Plaid provides no method to close :(
      }
    }
  }, {
    key: "render",
    value: function render() {
      return this.props.children;
    }
  }]);

  return ReactPlaid;
}(_react.Component);

ReactPlaid.propTypes = {
  open: _propTypes2.default.bool,
  // Displayed once a user has successfully linked their account
  clientName: _propTypes2.default.string.isRequired,

  // The Plaid API environment on which to create user accounts.
  // For development and testing, use tartan. For production, use production
  env: _propTypes2.default.oneOf([DEV_ENV, PROD_ENV]).isRequired,

  // Open link to a specific institution, for a more custom solution
  institution: _propTypes2.default.string,

  // Set to true to launch Link with longtail institution support enabled.
  // Longtail institutions are only available with the Connect product.
  longtail: _propTypes2.default.bool,

  // The public_key associated with your account; available from
  // the Plaid dashboard (https://dashboard.plaid.com)
  key: _propTypes2.default.string.isRequired,

  // The Plaid product you wish to use, either auth or connect.
  product: _propTypes2.default.oneOf([AUTH_PRODUCT, CONNECT_PRODUCT]).isRequired,

  // Specify an existing user's public token to launch Link in update mode.
  // This will cause Link to open directly to the authentication step for
  // that user's institution.
  token: _propTypes2.default.string,

  // Set to true to launch Link with the 'Select Account' pane enabled.
  // Allows users to select an individual account once they've authenticated
  selectAccount: _propTypes2.default.bool,

  // Specify a webhook to associate with a user.
  webhook: _propTypes2.default.string,

  // A function that is called when a user has successfully onboarded their
  // account. The function should expect two arguments, the public_key and a
  // metadata object
  onSuccess: _propTypes2.default.func.isRequired,

  // A function that is called when a user has specifically exited Link flow
  onExit: _propTypes2.default.func,

  // A function that is called when the Link module has finished loading.
  // Calls to plaidLinkHandler.open() prior to the onLoad callback will be
  // delayed until the module is fully loaded.
  onLoad: _propTypes2.default.func,
  // Called immediately to tell the code is loading
  onLoading: _propTypes2.default.func,
  // Called when plaid opens. This may be immediately after load, or plaid is still loading this will be called if open is requested but load hasn't succeeded yet
  onOpen: _propTypes2.default.func
};
ReactPlaid.defaultProps = {
  onExit: function onExit() {},
  onSuccess: function onSuccess() {},
  onLoad: function onLoad() {},
  onLoading: function onLoading() {},
  onOpen: function onOpen() {}
};
exports.default = ReactPlaid;
exports.DEV_ENV = DEV_ENV;
exports.PROD_ENV = PROD_ENV;
exports.AUTH_PRODUCT = AUTH_PRODUCT;
exports.CONNECT_PRODUCT = CONNECT_PRODUCT;